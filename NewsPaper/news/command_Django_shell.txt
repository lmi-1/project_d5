>>> from news.models import *
1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> user1 = User.objects.create(username = 'User1Name', first_name = 'Houston')         
>>> user2 = User.objects.create(username = 'User2Name', first_name = 'Philadelphia')
>>> user1
<User: User1Name>
>>> user2
<User: User2Name>
>>> user1 = User.objects.get(id=1)      
>>> user1
<User: Houston>
>>> user2 = User.objects.get(id=2)      
>>> user2
<User: Philadelphia>
>>>
2. Создать два объекта модели Author, связанные с пользователями.
>>> author1 = Author.objects.create(authorUser = user1)
>>> author2 = Author.objects.create(authorUser = user2) 
>>> author1 = Author.objects.get(id=1)       
>>> author1
<Author: Author object (1)>
>>> author2 = Author.objects.get(id=2)       
>>> author2
<Author: Author object (2)>
>>>
3. Добавить 4 категории в модель Category.
>>> category1 = Category.objects.create(name='World')               
>>> category2 = Category.objects.create(name='Climate')
>>> category3 = Category.objects.create(name='Science&Tech')
>>> category4 = Category.objects.create(name='Business')
>>> category1 = Category.objects.get(id=1).name
>>> category1
'World'
>>> category2 = Category.objects.get(id=2).name
>>> category2
'Climate'
>>> category3 = Category.objects.get(id=3).name 
>>> category3
'Science&Tech'
>>> category4 = Category.objects.get(id=4).name 
>>> category4
'Business'
>>>
4.Добавить 2 статьи и 1 новость.
>>> article1 = Post.objects.create(author=author1, categoryType='AR', title='Заголовок_статьи_1', text='Текст_статьиt_1')
>>> article2 = Post.objects.create(author=author1, categoryType='AR', title='Заголовок_статьи_2', text='Текст_статьиt_2') 
>>> news1 = Post.objects.create(author=author2, categoryType='NW', title='Заголовок_новости_1', text='Текст_новости_1')               
>>> article1 = Post.objects.get(id=1)  
>>> article1                          
<Post: Post object (1)>
>>> article2 = Post.objects.get(id=2)  
>>> article2                          
<Post: Post object (2)>
>>> news1 = Post.objects.get(id=3)  
>>> news1                          
<Post: Post object (3)>
>>>
5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))  
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1))  
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1))  
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))
>>>
6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> comment1 = Comment.objects.create(commentPost=article1, commentUser=user1, text='Текст_статьи_комментария_1') 
>>> comment2 = Comment.objects.create(commentPost=article2, commentUser=user2, text='Текст_статьи_комментария_2')
>>> comment3 = Comment.objects.create(commentPost=news1, commentUser=user1, text='Текст_новости_комментария_1')
>>> comment4 = Comment.objects.create(commentPost=news1, commentUser=user2, text='Текст_новости_комментария_2') 
>>> comment1 = Comment.objects.get(id=1).text  
>>> comment1
'Текст_статьи_комментария_1'
>>> comment2 = Comment.objects.get(id=2).text 
>>> comment2
'Текст_статьи_комментария_2'
>>> comment3 = Comment.objects.get(id=3).text 
>>> comment3
'Текст_новости_комментария_1'
>>> comment4 = Comment.objects.get(id=4).text 
>>> comment4
'Текст_новости_комментария_2'
>>>
7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> Comment.objects.get(id=1).like() 
>>> Comment.objects.get(id=2).like()
>>> Comment.objects.get(id=2).like()
>>> Comment.objects.get(id=3).like() 
>>> Comment.objects.get(id=3).like() 
>>> Comment.objects.get(id=3).like() 
>>> Comment.objects.get(id=4).like() 
>>> Comment.objects.get(id=4).like() 
>>> Comment.objects.get(id=4).like()
>>> Comment.objects.get(id=4).like()
>>> Comment.objects.get(id=1).dislike()     
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=2).dislike() 
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=3).dislike() 
>>> Comment.objects.get(id=3).dislike() 
>>> Comment.objects.get(id=4).dislike()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=2).like() 
>>> Post.objects.get(id=2).like() 
>>> Post.objects.get(id=3).like() 
>>> Post.objects.get(id=3).like() 
>>> Post.objects.get(id=3).like() 
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=2).dislike() 
>>> Post.objects.get(id=2).dislike() 
>>> Post.objects.get(id=3).dislike() 
>>>
8. Обновить рейтинги пользователей
>>> author1.update_rating()
>>> author2.update_rating()
>>> author1.ratingAuthor
-8
>>> author2.ratingAuthor
8
>>>
9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
 a = Author.objects.order_by('-ratingAuthor')[:1]   
>>> for i in a:
...     i.ratingAuthor
...     i.authorUser.username
... 
8
'Philadelphia'
>>>
>>> best_author = Author.objects.all().order_by('-ratingAuthor').values('authorUser__username', 'ratingAuthor')[0] 
>>> print(best_author)
{'authorUser__username': 'Philadelphia', 'ratingAuthor': 8}
>>>
10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> best_post = Post.objects.all().order_by('-rating').values('dateCreation', 'author__authorUser__username', 'rating', 'title', 'text')[0]
>>> print(best_post)
{'dateCreation': datetime.datetime(2022, 8, 26, 19, 48, 30, 395613, tzinfo=datetime.timezone.utc), 'author__authorUser__username': 'Philadelphia', 'rating': 2, 'title': 'Заголовок_новости_1', 'text': 'Текст_новости_1'}
>>>
11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> the_post = Post.objects.get(rating=best_post['rating'])
>>> the_post                                                       
<Post: Post object (3)>
>>> best_post_comments = the_post.comment_set.all()
>>> best_post_comments
<QuerySet [<Comment: Comment object (3)>, <Comment: Comment object (4)>]>
>>> best_post_comments = the_post.comment_set.all().values('dateCreation', 'commentUser__username', 'rating', 'text')
>>> best_post_comments
<QuerySet [{'dateCreation': datetime.datetime(2022, 8, 26, 19, 50, 50, 949012, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Houston', 'rating': 1, 'text': 'Текст_новости_ко
мментария_1'}, {'dateCreation': datetime.datetime(2022, 8, 26, 19, 51, 1, 151613, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Philadelphia', 'rating': 3, 'text': 'Текст_новости_комментария_2'}]>
>>>





